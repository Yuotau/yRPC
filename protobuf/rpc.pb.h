// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef PROTOBUF_INCLUDED_rpc_2eproto
#define PROTOBUF_INCLUDED_rpc_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_rpc_2eproto 

namespace protobuf_rpc_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_rpc_2eproto
namespace rpc {
class RpcRequestData;
class RpcRequestDataDefaultTypeInternal;
extern RpcRequestDataDefaultTypeInternal _RpcRequestData_default_instance_;
class RpcResponseData;
class RpcResponseDataDefaultTypeInternal;
extern RpcResponseDataDefaultTypeInternal _RpcResponseData_default_instance_;
}  // namespace rpc
namespace google {
namespace protobuf {
template<> ::rpc::RpcRequestData* Arena::CreateMaybeMessage<::rpc::RpcRequestData>(Arena*);
template<> ::rpc::RpcResponseData* Arena::CreateMaybeMessage<::rpc::RpcResponseData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace rpc {

// ===================================================================

class RpcRequestData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.RpcRequestData) */ {
 public:
  RpcRequestData();
  virtual ~RpcRequestData();

  RpcRequestData(const RpcRequestData& from);

  inline RpcRequestData& operator=(const RpcRequestData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RpcRequestData(RpcRequestData&& from) noexcept
    : RpcRequestData() {
    *this = ::std::move(from);
  }

  inline RpcRequestData& operator=(RpcRequestData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcRequestData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcRequestData* internal_default_instance() {
    return reinterpret_cast<const RpcRequestData*>(
               &_RpcRequestData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RpcRequestData* other);
  friend void swap(RpcRequestData& a, RpcRequestData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcRequestData* New() const final {
    return CreateMaybeMessage<RpcRequestData>(NULL);
  }

  RpcRequestData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RpcRequestData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RpcRequestData& from);
  void MergeFrom(const RpcRequestData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcRequestData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string method_path = 1;
  void clear_method_path();
  static const int kMethodPathFieldNumber = 1;
  const ::std::string& method_path() const;
  void set_method_path(const ::std::string& value);
  #if LANG_CXX11
  void set_method_path(::std::string&& value);
  #endif
  void set_method_path(const char* value);
  void set_method_path(const char* value, size_t size);
  ::std::string* mutable_method_path();
  ::std::string* release_method_path();
  void set_allocated_method_path(::std::string* method_path);

  // bytes content = 3;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // uint64 call_address = 2;
  void clear_call_address();
  static const int kCallAddressFieldNumber = 2;
  ::google::protobuf::uint64 call_address() const;
  void set_call_address(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:rpc.RpcRequestData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr method_path_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::uint64 call_address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RpcResponseData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.RpcResponseData) */ {
 public:
  RpcResponseData();
  virtual ~RpcResponseData();

  RpcResponseData(const RpcResponseData& from);

  inline RpcResponseData& operator=(const RpcResponseData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RpcResponseData(RpcResponseData&& from) noexcept
    : RpcResponseData() {
    *this = ::std::move(from);
  }

  inline RpcResponseData& operator=(RpcResponseData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcResponseData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcResponseData* internal_default_instance() {
    return reinterpret_cast<const RpcResponseData*>(
               &_RpcResponseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RpcResponseData* other);
  friend void swap(RpcResponseData& a, RpcResponseData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcResponseData* New() const final {
    return CreateMaybeMessage<RpcResponseData>(NULL);
  }

  RpcResponseData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RpcResponseData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RpcResponseData& from);
  void MergeFrom(const RpcResponseData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcResponseData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // uint64 call_address = 1;
  void clear_call_address();
  static const int kCallAddressFieldNumber = 1;
  ::google::protobuf::uint64 call_address() const;
  void set_call_address(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:rpc.RpcResponseData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::uint64 call_address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rpc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcRequestData

// string method_path = 1;
inline void RpcRequestData::clear_method_path() {
  method_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcRequestData::method_path() const {
  // @@protoc_insertion_point(field_get:rpc.RpcRequestData.method_path)
  return method_path_.GetNoArena();
}
inline void RpcRequestData::set_method_path(const ::std::string& value) {
  
  method_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.RpcRequestData.method_path)
}
#if LANG_CXX11
inline void RpcRequestData::set_method_path(::std::string&& value) {
  
  method_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.RpcRequestData.method_path)
}
#endif
inline void RpcRequestData::set_method_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  method_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.RpcRequestData.method_path)
}
inline void RpcRequestData::set_method_path(const char* value, size_t size) {
  
  method_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.RpcRequestData.method_path)
}
inline ::std::string* RpcRequestData::mutable_method_path() {
  
  // @@protoc_insertion_point(field_mutable:rpc.RpcRequestData.method_path)
  return method_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcRequestData::release_method_path() {
  // @@protoc_insertion_point(field_release:rpc.RpcRequestData.method_path)
  
  return method_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcRequestData::set_allocated_method_path(::std::string* method_path) {
  if (method_path != NULL) {
    
  } else {
    
  }
  method_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_path);
  // @@protoc_insertion_point(field_set_allocated:rpc.RpcRequestData.method_path)
}

// uint64 call_address = 2;
inline void RpcRequestData::clear_call_address() {
  call_address_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RpcRequestData::call_address() const {
  // @@protoc_insertion_point(field_get:rpc.RpcRequestData.call_address)
  return call_address_;
}
inline void RpcRequestData::set_call_address(::google::protobuf::uint64 value) {
  
  call_address_ = value;
  // @@protoc_insertion_point(field_set:rpc.RpcRequestData.call_address)
}

// bytes content = 3;
inline void RpcRequestData::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcRequestData::content() const {
  // @@protoc_insertion_point(field_get:rpc.RpcRequestData.content)
  return content_.GetNoArena();
}
inline void RpcRequestData::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.RpcRequestData.content)
}
#if LANG_CXX11
inline void RpcRequestData::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.RpcRequestData.content)
}
#endif
inline void RpcRequestData::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.RpcRequestData.content)
}
inline void RpcRequestData::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.RpcRequestData.content)
}
inline ::std::string* RpcRequestData::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:rpc.RpcRequestData.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcRequestData::release_content() {
  // @@protoc_insertion_point(field_release:rpc.RpcRequestData.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcRequestData::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:rpc.RpcRequestData.content)
}

// -------------------------------------------------------------------

// RpcResponseData

// uint64 call_address = 1;
inline void RpcResponseData::clear_call_address() {
  call_address_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RpcResponseData::call_address() const {
  // @@protoc_insertion_point(field_get:rpc.RpcResponseData.call_address)
  return call_address_;
}
inline void RpcResponseData::set_call_address(::google::protobuf::uint64 value) {
  
  call_address_ = value;
  // @@protoc_insertion_point(field_set:rpc.RpcResponseData.call_address)
}

// bytes content = 2;
inline void RpcResponseData::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcResponseData::content() const {
  // @@protoc_insertion_point(field_get:rpc.RpcResponseData.content)
  return content_.GetNoArena();
}
inline void RpcResponseData::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.RpcResponseData.content)
}
#if LANG_CXX11
inline void RpcResponseData::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.RpcResponseData.content)
}
#endif
inline void RpcResponseData::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.RpcResponseData.content)
}
inline void RpcResponseData::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.RpcResponseData.content)
}
inline ::std::string* RpcResponseData::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:rpc.RpcResponseData.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcResponseData::release_content() {
  // @@protoc_insertion_point(field_release:rpc.RpcResponseData.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcResponseData::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:rpc.RpcResponseData.content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_rpc_2eproto
